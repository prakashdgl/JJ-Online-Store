Encode Query Data Example:
=====================================================================================
function getKeyValueDataByAjax(keyImplementationId, callback) {
	const querydata = {
		keyImplementationId: keyImplementationId
	};

	const url = getValuesByKeyImplementationIdUrl + encodeQueryData(querydata);

	$.ajax({
		type: "GET",
		async: true,
		url: url,
		contentType: "application/json",
		dataType: "json",
		success: callback,
		error: onError
	});
};
=====================================================================================
Encrypt/Decrypt Data

Mapping:
public class WebApiSettingsProfile : Profile
{
    public WebApiSettingsProfile()
    {
        CreateMap<WebApiSettings, WebApiSettingsUxModel>()
            .AfterMap((src, dest) => dest.DecryptData(dest));

        CreateMap<WebApiSettingsUxModel, WebApiSettings>()
            .BeforeMap((src, dest) => src.EncryptData(src))
            .ForMember(w => w.Company, opts => opts.Ignore());
    }
}

ViewModel:
public WebApiSettingsUxModel DecryptData(WebApiSettingsUxModel model)
{
	model.Password = CryptoMD5.DecryptMD5(model.Password);
	return model;
}

public WebApiSettingsUxModel EncryptData(WebApiSettingsUxModel model)
{
	model.Password = CryptoMD5.EncryptMD5(model.Password);
	return model;
}

public static class CryptoMD5
{
    private const string Strong = "9p6fI8o1Xld9hn2";

    public static string DecryptMD5(string data)
    {
        if (string.IsNullOrEmpty(data)) return null;

        var utf8 = new UTF8Encoding();
        var hashProvider = new MD5CryptoServiceProvider();
        var tdesKey = hashProvider.ComputeHash(utf8.GetBytes(Strong));

        var tdesAlgorithm = new TripleDESCryptoServiceProvider
        {
            Key = tdesKey,
            Mode = CipherMode.ECB,
            Padding = PaddingMode.PKCS7
        };

        try
        {
            var dataToDecrypt = Convert.FromBase64String(data);
            var decryptor = tdesAlgorithm.CreateDecryptor();
            var results = decryptor.TransformFinalBlock(dataToDecrypt, 0, dataToDecrypt.Length);
            return utf8.GetString(results);
        }
        catch (Exception)
        {
            return data;
        }
        finally
        {
            tdesAlgorithm.Clear();
            hashProvider.Clear();
        }
    }

    public static byte[] DecryptFile(string fileFullPath)
    {
        FileStream fileStream = null;

        var utf8 = new UTF8Encoding();
        var hashProvider = new MD5CryptoServiceProvider();
        var tdesKey = hashProvider.ComputeHash(utf8.GetBytes(Strong));

        var tdesAlgorithm = new TripleDESCryptoServiceProvider
        {
            Key = tdesKey,
            Mode = CipherMode.ECB,
            Padding = PaddingMode.PKCS7
        };

        try
        {
            var decryptor = tdesAlgorithm.CreateDecryptor();

            fileStream = new FileStream(fileFullPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);

            int length = (int)fileStream.Length;
            byte[] result = new byte[length];

            fileStream.Read(result, 0, length);
            return decryptor.TransformFinalBlock(result, 0, result.Length);
        }
        finally
        {
            tdesAlgorithm.Clear();
            hashProvider.Clear();

            if (fileStream != null)
            {
                fileStream.Flush();
                fileStream.Close();
            }
        }
    }

    public static string EncryptMD5(string data)
    {
        if (string.IsNullOrEmpty(data)) return null;

        var utf8 = new UTF8Encoding();
        var hashProvider = new MD5CryptoServiceProvider();
        var tdesKey = hashProvider.ComputeHash(utf8.GetBytes(Strong));
        var tdesAlgorithm = new TripleDESCryptoServiceProvider
        {
            Key = tdesKey,
            Mode = CipherMode.ECB,
            Padding = PaddingMode.PKCS7
        };

        try
        {
            var dataToEncrypt = utf8.GetBytes(data);
            var encryptor = tdesAlgorithm.CreateEncryptor();
            var results = encryptor.TransformFinalBlock(dataToEncrypt, 0, dataToEncrypt.Length);

            return Convert.ToBase64String(results);
        }
        finally
        {
            tdesAlgorithm.Clear();
            hashProvider.Clear();
        }
    }

    public static void EncryptFile(string fileFullPath, byte[] content)
    {
        FileStream fileStream = null;
        var utf8 = new UTF8Encoding();
        var hashProvider = new MD5CryptoServiceProvider();
        var tdesKey = hashProvider.ComputeHash(utf8.GetBytes(Strong));

        var tdesAlgorithm = new TripleDESCryptoServiceProvider
        {
            Key = tdesKey,
            Mode = CipherMode.ECB,
            Padding = PaddingMode.PKCS7
        };

        try
        {
            var encryptor = tdesAlgorithm.CreateEncryptor();
            var results = encryptor.TransformFinalBlock(content, 0, content.Length);

            fileStream = new FileStream(fileFullPath, FileMode.Append, FileAccess.Write, FileShare.ReadWrite);
            fileStream.Write(results, 0, results.Length);
        }
        finally
        {
            tdesAlgorithm.Clear();
            hashProvider.Clear();

            if (fileStream != null)
            {
                fileStream.Flush();
                fileStream.Close();
            }
        }
    }

    public static string GetSha256(string password)
    {
        var hash = String.Empty;
        var crypt = new SHA256Managed();
        var crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(password), 0, Encoding.UTF8.GetByteCount(password));
        hash = crypto.Aggregate(hash, (current, bit) => current + bit.ToString("x2"));

        return hash.ToUpper();
    }
}

